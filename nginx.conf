# Feito com ajuda de IA generativa. :)
# Define 1 worker process (ideal para containers com pouco CPU)
# Em containers pequenos, múltiplos workers competem por recursos
worker_processes 1;

# Configurações de eventos - otimizadas para baixo recurso
events {
    # Conexões por worker - balanceado entre performance e memória
    # 1024 é suficiente para testes sem sobrecarregar a memória
    worker_connections 1024;

    # Usa epoll (Linux) - mais eficiente que select/poll
    use epoll;

    # Aceita múltiplas conexões por vez - melhora throughput
    multi_accept on;

    # Desabilita accept_mutex para reduzir overhead em single worker
    accept_mutex off;
}

http {
    # === OTIMIZAÇÕES DE MEMÓRIA ===

    # Desabilita logs completamente - economiza I/O e memória
    access_log off;
    error_log /dev/null crit;

    # Keep-alive otimizado para containers
    keepalive_timeout 30;             # Timeout reduzido para liberar conexões
    keepalive_requests 100;           # Requests por conexão keep-alive

    # === CONFIGURAÇÃO DE UPSTREAM ===
    upstream backend_apis {
        server api1:8080;
        server api2:8080;

        # Keep-alive para upstream - reutiliza conexões TCP
        keepalive 150;

        # Timeout para conexões idle no pool
        keepalive_timeout 60s;
    }
    # === SERVIDOR PRINCIPAL ===
    server {
        # Escuta na porta 9999 conforme solicitado
        listen 9999 default_server;

        # Server name genérico - economiza processamento
        server_name _;

        # Desabilita logs completamente
        access_log off;
        error_log off;

        # === CONFIGURAÇÃO DE PROXY ===
        location / {
            # Direciona para o upstream
            proxy_pass http://backend_apis;

            # Headers essenciais para proxy reverso
            proxy_set_header Host $host;
            proxy_set_header Connection "";
            proxy_http_version 1.1;
            proxy_set_header Keep-Alive "";

            # Cache de DNS interno - reduz lookups
            resolver_timeout 2s;
        }
    }
    # Timeout para client
    client_header_timeout 10s;
    client_body_timeout 10s;

    # Timeout para envio de resposta
    send_timeout 10s;
}